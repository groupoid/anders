module topology where
import lib/foundations/univalent/path
import lib/foundations/mltt/bool

--- Kang Rongji, 2022-2023
--- Classical Topology

def Path‚ÇÅ (A : U‚ÇÅ) (x y : A) := PathP (<_> A) x y
def isProp‚ÇÅ (A : U‚ÇÅ) := Œ† (a b : A), Path‚ÇÅ A a b
def isSet‚ÇÅ (A : U‚ÇÅ) := Œ† (a b : A) (x y : Path‚ÇÅ A a b), Path‚ÇÅ (Path‚ÇÅ A a b) x y

def isPropPi‚ÇÅ (A: U‚ÇÅ) (B: A ‚Üí U‚ÇÅ) (h: Œ† (x: A), isProp‚ÇÅ (B x)) : isProp‚ÇÅ (Œ† (x: A), B x)
 := Œª (f g: Œ† (x: A), B x), <i> Œª (x: A), h x (f x) (g x) @ i

def isPropPi‚ÇÅ' (A: U‚ÇÅ) (B: A ‚Üí U) (h: Œ† (x: A), isProp (B x)) : isProp‚ÇÅ (Œ† (x: A), B x)
 := Œª (f g: Œ† (x: A), B x), <i> Œª (x: A), h x (f x) (g x) @ i

def isSetPi‚ÇÅ (A: U‚ÇÅ) (B: A ‚Üí U‚ÇÅ) (h: Œ† (x: A), isSet‚ÇÅ (B x)) : isSet‚ÇÅ (Œ† (x: A), B x)
 := Œª (f g: Œ† (x: A), B x) (p q: Path‚ÇÅ (Œ† (x: A), B x) f g), <i j> Œª (x: A), h x (f x) (g x) (<j1> (p @ j1) x) (<j2> (q @ j2) x) @ i @ j

def isSetPi‚ÇÅ' (A: U‚ÇÅ) (B: A ‚Üí U) (h: Œ† (x: A), isSet (B x)) : isSet‚ÇÅ (Œ† (x: A), B x)
 := Œª (f g: Œ† (x: A), B x) (p q: Path‚ÇÅ (Œ† (x: A), B x) f g), <i j> Œª (x: A), h x (f x) (g x) (<j1> (p @ j1) x) (<j2> (q @ j2) x) @ i @ j

def Œ© := U ‚Üí ùüê
def ‚Ñô (X: U‚ÇÅ) := X ‚Üí Œ©
def isSet-‚Ñô (X: U‚ÇÅ) : isSet‚ÇÅ (‚Ñô X)
 := isSetPi‚ÇÅ X (Œª (x: X), Œ©) (Œª (x: X), isSetPi‚ÇÅ' U (Œª (_: U), ùüê) (Œª (_: U), boolset))
axiom specify (X: U‚ÇÅ) : (X ‚Üí Œ©) ‚Üí ‚Ñô X
def ‚àÖ (X: U‚ÇÅ) : ‚Ñô X := \ (_: X) (_: U), false
def total (X: U‚ÇÅ) : ‚Ñô X := \ (_: X) (_: U), true
def ‚àà (X: U‚ÇÅ) (el: X) (set: ‚Ñô X) : U‚ÇÅ := Path‚ÇÅ (U ‚Üí ùüê) (set el) (\(_: U), true)
def ‚àâ (X: U‚ÇÅ) (el: X) (set: ‚Ñô X) : U‚ÇÅ := Path‚ÇÅ (U ‚Üí ùüê) (set el) (\(_: U), false)
def ‚äÜ (X: U‚ÇÅ) (A B: ‚Ñô X) := Œ† (x: X), (‚àà X x A) √ó (‚àà X x B)
def ‚àÅ (X: U‚ÇÅ) : ‚Ñô X ‚Üí ‚Ñô X -- not (complement)
 := Œª (h: ‚Ñô X), Œª (x: X) (Y: U), not (h x Y)
def ‚à™ (X: U‚ÇÅ) : ‚Ñô X ‚Üí ‚Ñô X ‚Üí ‚Ñô X -- or (union)
 := Œª (h1: ‚Ñô X) (h2: ‚Ñô X), Œª (x: X) (Y: U), or (h1 x Y) (h2 x Y)
def ‚à© (X: U‚ÇÅ) : ‚Ñô X ‚Üí ‚Ñô X ‚Üí ‚Ñô X -- and (intersection)
 := Œª (h1: ‚Ñô X) (h2: ‚Ñô X), Œª (x: X) (Y: U), and (h1 x Y) (h2 x Y)
