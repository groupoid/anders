module bool where
import lib/foundations/univalent/path
import lib/foundations/mltt/either
import lib/foundations/mltt/proto

--- data 𝟐 : U := 0₂ | 1₂
def rec₂ (A : U) (a b : A) : 𝟐 → A := ind₂ (λ (_ : 𝟐), A) a b
def not : 𝟐 → 𝟐 := rec₂ 𝟐 1₂ 0₂
def and : 𝟐 → 𝟐 → 𝟐 := rec₂ (𝟐 → 𝟐) (const 𝟐 𝟐 0₂) (id 𝟐)
def or  : 𝟐 → 𝟐 → 𝟐 := rec₂ (𝟐 → 𝟐) (id 𝟐) (const 𝟐 𝟐 1₂)
def xor : 𝟐 → 𝟐 → 𝟐 := rec₂ (𝟐 → 𝟐) (id 𝟐) not

--- Bitlib
def HA (a b : 𝟐) : 𝟐 × 𝟐 := (xor a b, and a b)
def or² (a : 𝟐) (w : 𝟐 × 𝟐) : 𝟐 × 𝟐 := (w.1, or a w.2)
def FA (a b cᵢₙ : 𝟐) : 𝟐 × 𝟐 := or² (HA a b).2 (HA (HA a b).1 cᵢₙ)
def add-2bit (a b : 𝟐 × 𝟐) : 𝟐 × 𝟐 := ((FA a.1 b.1 (HA a.2 b.2).2).1, (HA a.2 b.2).1)

--- Church
def bool′ := Π (α : U), α → α → α
def true′  : bool′ := λ (α : U) (t f : α), t
def false′ : bool′ := λ (α : U) (t f : α), f
def ite (α : U) (a b : α) (f : bool′) : α := f α a b

def th722 (A: U) (R: A -> A -> U) (r: Π(x: A), R x x) (h: Π(x y: A), isProp (R x y)) (f: Π (x y: A), R x y -> Path A x y) : isSet A
 := λ (a b: A), λ (p q: Path A a b),
    <i j> hcomp A (∂ i ∨ ∂ j) (λ (l : I), [(i = 0) -> p @ l /\ j,
                                           (i = 1) -> q @ l /\ j,
                                           (j = 0) -> f (p @ j) (q @ j) (h (p @ j) (q @ j) (r a) (r (p @ i /\ j)) @ j) @ -l \/ -j,
                                           (j = 1) -> f a b (transp (<i> R a (q @ i)) 0 (r a)) @ l]) a

def cor723 (A: U) (h: Π (x y: A), ((Path A x y -> 𝟎) -> 𝟎) -> Path A x y) : isSet A
 := th722 A (λ (x y: A), (Path A x y -> 𝟎) -> 𝟎) (λ (x: A) (g: Path A x x -> 𝟎), g (<i0> x))
            (λ(x y: A) (a b: (Path A x y -> 𝟎) -> 𝟎), <j> λ (p: Path A x y -> 𝟎), ind₀ (Path 𝟎 (a p) (b p)) (a p) @ j) h

def ffineqtt (h: Path 𝟐 0₂ 1₂) : 𝟎
 := transp (<i> ind₂ (λ(_: 𝟐), U) 𝟎 𝟏 (h @ -i)) 0 ★

def boolset : isSet 𝟐
 := cor723 𝟐 (ind₂ (λ (x: 𝟐), Π (y: 𝟐), ((Path 𝟐 x y -> 𝟎) ->𝟎) -> Path 𝟐 x y)
               (ind₂ (λ (y: 𝟐), ((Path 𝟐 0₂ y -> 𝟎) -> 𝟎) -> Path 𝟐 0₂ y)
                 (λ (h00: ((Path 𝟐 0₂ 0₂ -> 𝟎) -> 𝟎)), <i1> 0₂)
                   (λ (h01: ((Path 𝟐 0₂ 1₂ -> 𝟎) -> 𝟎)), ind₀ (Path 𝟐 0₂ 1₂) (h01 ffineqtt)))
               (ind₂ (λ (y: 𝟐), ((Path 𝟐 1₂ y -> 𝟎) ->𝟎) -> Path 𝟐 1₂ y)
                 (λ (h10: ((Path 𝟐 1₂ 0₂ -> 𝟎) -> 𝟎)), ind₀ (Path 𝟐 1₂ 0₂) (h10 (λ (g: Path 𝟐 1₂ 0₂), ffineqtt (<l> g @ -l))))
                   (λ (h11: ((Path 𝟐 1₂ 1₂ -> 𝟎) -> 𝟎)), <j> 1₂)))
