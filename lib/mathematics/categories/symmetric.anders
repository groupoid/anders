module symmetric where
import lib/mathematics/categories/category
import lib/mathematics/categories/functor
import lib/mathematics/categories/natural

def catproduct (A B: precategory): precategory
 := ((prod A.C.ob B.C.ob,(\(x y: prod A.C.ob B.C.ob), prod (A.C.hom x.1 y.1) (B.C.hom x.2 y.2)), star),
    (?,?,?,?,?,?,star),
    star)

axiom flipBifunctor (X Y Z: precategory) (F: catfunctor (catproduct X Y) Z)
    : catfunctor (catproduct Y X) Z

def isMonoidal (C: precategory): U
 := Œ£ (tensor: catfunctor (catproduct C C) C)
      (tensor‚ÇÅ: C.C.ob)
      (left‚ÇÅ: Œ† (x: C.C.ob),  Path (C.C.ob) x (tensor.ob (tensor‚ÇÅ,x)))
      (right‚ÇÅ: Œ† (x: C.C.ob), Path (C.C.ob) x (tensor.ob (x,tensor‚ÇÅ)))
      (associator: Œ† (x y z: C.C.ob), Path (C.C.ob) (tensor.ob ((tensor.ob (x,y)),z)) (tensor.ob (x,(tensor.ob (y,z)))))
      (triangle: Œ† (x y: C.C.ob), ùüè)
      (pentagon: Œ† (x y z w: C.C.ob), ùüè), ùüè

def isBraided (C: precategory) (m: isMonoidal C) : U
 := Œ£ (braiding: natiso (catproduct C C) C m.tensor (flipBifunctor C C C m.tensor))
      (hexagon‚ÇÅ: unit)
      (hexagon‚ÇÇ: unit), ùüè

def isSymmetric (C: precategory) (m: isMonoidal C) (b: isBraided C m) : U
 := Œ£ (commutative: unit)
      (braidingCondition: unit), ùüè
