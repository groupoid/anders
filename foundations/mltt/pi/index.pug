include ../../../header

html
    head
        meta(property='og:title'       content='PI')
        meta(property='og:description' content='Dependent Product')
        meta(property='og:url'         content='https://anders.groupoid.space/foundations/mltt/pi/')

block title
    title PI

block content
    nav
        <a href='../../../index.html'>ANDERS</a>
        <a href='../../../lib/index.html'>LIB</a>
        <a href='#'>PI</a>
    article.main
        .exe
            section
                h1 FUNCTION SPACES
                span.
        aside
            time Published: 14 OCT 2017
        .exe
            section
                +tex.
                    $\Pi$-type is a space that contains dependent functions, which
                    codomain type depends on value from domain type. As fiber domain
                    present in every defined function, $\Pi$-type is also a dependent product.
                +tex.
                    Spaces of dependent functions are using in type theory to model
                    various mathematical constructions, objects, types, or spaces and their maps:
                    dependent functions, continuous maps, étale maps, fibre bundles, universal
                    quantifier $\mathbf{\forall}$-type, implications, etc.

                h2 Formation

                +tex.
                    $\mathbf{Definition\ 1.1}$ ($\Pi$-Formation, Dependent Product).
                    $\Pi$-types represents the way we create the spaces of dependent functions $f: \Pi(x:A), B(x)$
                    with domain in $A$ and codomain in type family $B : A \rightarrow U$ over $A$.
                +tex(true).
                    $$
                       \Pi : U =_{def} \prod_{A:U}\prod_{x:A}B(x).
                    $$
                +code.
                    def Pi (A : U) (B : A → U) : U
                     := Π (x : A), B x
                br.

                h2 Introduction

                +tex.
                    $\mathbf{Definition\ 1.2}$ ($\lambda$-function).
                    Lambda constructor defines a new lambda function in the space of dependent functions.
                    it is called lambda abstraction and displayed as $\lambda x. b(x)$ or $x \mapsto b(x)$.

                +tex(true).
                    $$
                       \backslash (x: A) \rightarrow b : \Pi(A,B) =_{def}
                    $$
                +tex(true).
                    $$
                       \prod_{A:U}\prod_{B:A \rightarrow U}\prod_{b:B(a)}\lambda x.b_x.
                    $$

                +code.
                    def lambda (A: U) (B: A → U) (b: Pi A B)
                      : Pi A B := λ (x : A), b x

                    def lam (A B: U) (f: A → B)
                      : A → B := λ (x : A), f x
                br.

                +tex.
                    When codomain is not dependent on valude from domain the function $f: A \rightarrow B$
                    is studied in System F$_\omega$, dependent case in studied
                    in Systen P$_\omega$ or Calculus of Construction (CoC).

                h2 Elimination

                +tex.
                    $\mathbf{Definition\ 1.3}$ ($\Pi$-Induction Principle).
                    States that if predicate holds for lambda function
                    then there is a function from function space to the space of predicate.
                +code.
                    def П-ind (A : U) (B : A -> U)
                        (C : Pi A B → U)
                        (g: Π (x: Pi A B), C x)
                      : П (p: Pi A B), C p
                     := \ (p: Pi A B), g p
                br.

                +tex.
                    $\mathbf{Definition\ 1.3.1}$ ($\lambda$-application).
                    Application reduces the term by using recursive substitution.

                +tex(true).
                    $$
                       f\ a : B(a) =_{def} \prod_{A:U}\prod_{B: A \rightarrow U}\prod_{a:A}\prod_{f: \prod_{x:A}B(a)}f(a).
                    $$

                +code.
                    def apply (A: U) (B: A → U)
                        (f: Pi A B) (a: A) : B a := f a

                    def app (A B: U) (f: A → B)
                        (x: A): B := f x
                br.

                +tex.
                    $\mathbf{Definition\ 1.3.2}$ (Composition).
                    Composition is using application of appropriate singnatures.

                +code.
                    def ∘ᵀ (α β γ: U) : U
                      := (β → γ) → (α → β) → (α → γ)

                    def ∘ (α β γ : U) : ∘ᵀ α β γ
                      := λ (g: β → γ) (f: α → β) (x: α), g (f x)
                br.

                h2 Computation

                +tex.
                    $\mathbf{Theorem\ 1.4}$ (Computation $\Pi_\beta$).
                    $β$-rule shows that composition $\mathrm{lam} \circ \mathrm{app}$
                    could be fused.

                +tex(true).
                    $$
                       f(a) =_{B(a)} (\lambda (x:A) \rightarrow f(a))(a).
                    $$

                +code.
                    def Π-β (A : U) (B : A → U) (a : A) (f : Pi A B)
                      : Path (B a) (apply A B (lambda A B f) a) (f a)
                     := idp (B a) (f a)
                br.

                h2 Uniqueness

                +tex.
                    $\mathbf{Theorem\ 1.5}$ (Uniqueness $\Pi_\eta$).
                    $η$-rule shows that composition $\mathrm{app} \circ \mathrm{lam}$ could be fused.

                +tex(true).
                    $$
                       f =_{(x:A)\rightarrow B(a)} (\lambda (y:A) \rightarrow f(y)).
                    $$
                +code.
                    def Π-η (A : U) (B : A → U) (a : A) (f : Pi A B)
                      : Path (Pi A B) f (λ (x : A), f x)
                     := idp (Pi A B) f
                br.

                h1 THEOREMS

                +tex.
                    $\mathbf{Theorem\ 1.6}$ (Functions Preserve Paths). For a function $f: (x:A) \rightarrow B(x)$
                    there is an $\mathrm{ap}_f : \mathrm{Path}_A(x,y) \rightarrow \mathrm{Path}_{B(x)}(f(x),f(y))$. This is called
                    application of $f$ to path or congruence property ($\mathrm{cong}$, for non-dependent case).
                    This property behaves functoriality as if paths are groupoid morphisms and types are objects.

                +code.
                    def FiberPi (B: U) (F: B -> U) (y: B)
                      : Path U (fiber (Sigma B F) B (pi1 B F) y) (F y)

                +tex.
                    $\mathbf{Theorem\ 1.7}$ (Trivial Fiber equals Family of Sets).
                    Inverse image (fiber) of fiber bundle $(F, B * F, \mathrm{pr}_1,B)$ in point $y : B$ equals $F(y)$.

                +tex.
                    $\mathbf{Theorem\ 1.8}$ (Homotopy Equivalence). If fiber space is set for all base, and
                    there are two functions $f,g : (x:A) \rightarrow B(x)$ and two
                    homotopies between them, then these homotopies are equal.

                +code.
                    def setPi (A: U) (B: A -> U)
                        (h: П (x: A), isSet (B x)) (f g: Pi A B)
                        (p q: Path (Pi A B) f g)
                      : Path (Path (Pi A B) f g) p q
                br.

                +tex.
                    $\mathbf{Theorem\ 1.9}$ (HomSet). If codomain is set then space of sections is a set.

                +code.
                    def setFun (A B : U) (_: isSet B) : isSet (A -> B)
                br.

                +tex.
                    $\mathbf{Theorem\ 1.10}$ (Contractability).
                    If domain and codomain is contractible then the space of sections is contractible.

                +code.
                    def piIsContr (A: U) (B: A -> U) (u: isContr A)
                        (q: П (x: A), isContr (B x))
                      : isContr (Pi A B)
                br

                +code.
                    def pathPi (A: U) (B: A -> U) (f g : Pi A B)
                      : Path U (Path (Pi A B) f g)
                               ((x:A) -> Path (B x) (f x) (g x))
                br

                h1 Interpretations
                p.

                h2 Homotopy Theory

                +tex.
                    Geometrically, $П$-type is a space of sections,
                    while the dependent codomain is a space of fibrations.
                    Lambda functions are sections or points in these spaces,
                    while the function result is a fibration.

                +tex.
                    $\mathbf{Definition}$ (Fiber). The fiber of the map $p: E \rightarrow B$ in a point $y: B$
                    is all points $x: E$ such that $p(x)=y$.

                +tex.
                    $\mathbf{Definition}$ (Fiber Bundle).
                    The fiber bundle $ F \rightarrow E \mapright{p} B$ on a
                    total space $E$ with fiber layer $F$ and base $B$ is a
                    structure $(F,E,p,B)$ where $p: E \rightarrow B$ is a surjective
                    map with following property:
                    for any point $y: B$ exists a neighborhood $U_b$ for which a
                    homeomorphism $f: p^{-1}(U_b) \rightarrow U_b \times F$
                    making the following diagram commute.

                +tex(true).
                    $$
                        \begin{array}{ccc}
                            p^{-1}(U_b) & \mapright{f} & U_b \times F \\
                            \mapdown{\mathbf{p}} & \mapdiagr{\mathrm{pr}_1} & \\
                            U_b & & \\
                        \end{array}
                    $$

                +tex.
                    $\mathbf{Definition}$ (Cartesian Product of Family over B). Is a set $F$
                    of sections of the bundle with elimination map $\mathrm{app} : F \times B \rightarrow E$.
                    such that

                +tex.
                    $$
                            F \times B \mapright{\mathrm{app}} E \mapright{\mathbf{\mathrm{pr}_1}} B
                    $$

                +tex.
                    $\mathrm{pr}_1$ is a product projection, so $\mathrm{pr}_1$, $\mathrm{app}$ are moriphisms
                    of slice category $Set_{/B}$. The universal mapping property of $F$:
                    for all $A$ and morphism $A \times B \rightarrow E$ in $Set_{/B}$ exists
                    unique map $A \rightarrow F$ such that everything commute. So a category
                    with all dependent products is necessarily a category with all pullbacks.

                +tex.
                    $\mathbf{Definition}$ (Trivial Fiber Bundle).
                    When total space $E$ is cartesian product $\Sigma(B,F)$
                    and $p = \mathrm{pr}_1$ then such bundle is called trivial $(F,\Sigma(B,F),\mathrm{pr}_1,B)$.

                h2 Category Theory

                +tex.
                    Categorically, $\Pi$-types arise in locally cartesian closed categories.
                    In this case $\Pi$-type represents the cartesian family of sets,
                    generalizing the cartesian product of sets or dependent product.

                +tex.
                    $\mathbf{Definition}$ (Section). A section of morphism $f: A \rightarrow B$
                    in some category is the morphism $g: B \rightarrow A$ such that
                    $f \circ g: B \mapright{g} A \mapright{f} B$ equals the identity morphism on B.

                +tex.
                    $\mathbf{Definition}$ (Dependent Product). The dependent product along
                    morphism $g: B \rightarrow A$ in category $C$ is the right
                    adjoint $\Pi_g : C_{/B} \rightarrow C_{/A}$ of the base change functor.

                +tex.
                    $\mathbf{Definition}$ (Space of Sections). Let $\mathbf{H}$ be
                    a $(\infty,1)$-topos, and let $E \rightarrow B : \mathbf{H}_{/B}$ a bundle in
                    $\mathbf{H}$, object in the slice topos. Then the space of sections $\Gamma_\Sigma(E)$
                    of this bundle is the Dependent Product:

                +tex(true).
                    $$
                       \Gamma_\Sigma(E) = \Pi_\Sigma (E) \in \mathbf{H}.
                    $$


include ../../../footer
